from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from sqlalchemy import select

from models import User, async_session_maker, get_matches_for, save_like, check_mutual_like
from reply_keyboard import pace_keyboard, time_keyboard
from inline_keyboard import match_keyboard
from location_matcher import suggest_location

import asyncio

router = Router()

class Form(StatesGroup):
    name = State()
    city = State()
    location = State()
    pace = State()
    time = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–°”ô–ª–µ–º! –ê—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑—à—ñ üòä")
    await state.set_state(Form.name)

@router.message(Command("menu"))
async def show_main_menu(message: Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚öô ”®–∑–≥–µ—Ä—Ç—É –∞–Ω–∫–µ—Ç–∞–Ω—ã")],
            [types.KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")],
            [types.KeyboardButton(text="üëÄ –ê–Ω–∫–µ—Ç–∞–Ω—ã –∫”©—Ä—É")],
            [types.KeyboardButton(text="üöÄ –ñ–∞“£–∞ –∞–¥–∞–º–¥—ã —Ç–∞–±—É")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ë–∞—Å—Ç—ã –º”ô–∑—ñ—Ä:", reply_markup=keyboard)

@router.message(F.text == "üëÄ –ê–Ω–∫–µ—Ç–∞–Ω—ã –∫”©—Ä—É")
async def view_profile(message: Message):
    async with async_session_maker() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if user:
            text = (
                f"üë§ <b>{user.name}</b>\n"
                f"üèô “ö–∞–ª–∞: {user.city}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {user.location}\n"
                f"‚è± –¢–µ–º–ø: {user.pace} –º–∏–Ω/–∫–º\n"
                f"üïì –£–∞“õ—ã—Ç: {user.time}"
            )
            await message.answer(text, parse_mode="HTML")
        else:
            await message.answer("–°—ñ–∑–¥–µ –∞–Ω–∫–µ—Ç–∞ ”ô–ª—ñ –∂–æ“õ —Å–∏—è“õ—Ç—ã. /start –∞—Ä“õ—ã–ª—ã –±–∞—Å—Ç–∞“£—ã–∑ ‚úçÔ∏è")

@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
async def refresh_matches(message: Message):
    await show_next_match(message.from_user.id, message.bot)

@router.message(F.text == "üöÄ –ñ–∞“£–∞ –∞–¥–∞–º–¥—ã —Ç–∞–±—É")
async def find_new_match(message: Message):
    await show_next_match(message.from_user.id, message.bot)

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("“ö–∞–π “õ–∞–ª–∞–¥–∞–Ω—Å—ã“£?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    edit = await state.get_data()
    if edit.get("edit_mode"):
        async with async_session_maker() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.city = message.text
                await session.commit()
        await message.answer("‚úÖ “ö–∞–ª–∞ ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    await state.update_data(city=message.text)
    await message.answer("–ù–∞“õ—Ç—ã –ª–æ–∫–∞—Ü–∏—è (–º—ã—Å–∞–ª—ã, –ø–∞—Ä–∫, –∞—É–¥–∞–Ω)?")
    await state.set_state(Form.location)

@router.message(Form.location)
async def process_location(message: Message, state: FSMContext):
    edit = await state.get_data()
    if edit.get("edit_mode"):
        async with async_session_maker() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.location = message.text
                await session.commit()
        await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    suggested = suggest_location(message.text)
    location = suggested if suggested else message.text
    await state.update_data(location=location)
    await message.answer("–¢–µ–º–ø “õ–∞–Ω–¥–∞–π? (–º–∏–Ω—É—Ç/–∫–º ‚Äî —Ç–∞“£–¥–∞“£—ã–∑ –µ“£ –∂–∞“õ—ã–Ω –º”ô–Ω–¥—ñ)", reply_markup=pace_keyboard())
    await state.set_state(Form.pace)

@router.message(Form.pace)
async def process_pace(message: Message, state: FSMContext):
    edit = await state.get_data()
    if edit.get("edit_mode"):
        async with async_session_maker() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.pace = message.text
                await session.commit()
        await message.answer("‚úÖ –¢–µ–º–ø ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    await state.update_data(pace=message.text)
    await message.answer("“ö–∞–π —É–∞“õ—ã—Ç—Ç–∞ –∂“Ø–≥—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ? üïì", reply_markup=time_keyboard())
    await state.set_state(Form.time)

@router.message(Form.time)
async def process_time(message: Message, state: FSMContext):
    edit = await state.get_data()
    if edit.get("edit_mode"):
        async with async_session_maker() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.time = message.text
                await session.commit()
        await message.answer("‚úÖ –£–∞“õ—ã—Ç ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    user_data = await state.get_data()
    await state.clear()
    async with async_session_maker() as session:
        existing_user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if existing_user:
            existing_user.name = user_data["name"]
            existing_user.city = user_data["city"]
            existing_user.location = user_data["location"]
            existing_user.pace = user_data["pace"]
            existing_user.time = message.text
        else:
            session.add(User(
                telegram_id=message.from_user.id,
                name=user_data["name"],
                city=user_data["city"],
                location=user_data["location"],
                pace=user_data["pace"],
                time=message.text
            ))
        await session.commit()
    await message.answer("–†–∞“õ–º–µ—Ç! –ê–Ω–∫–µ—Ç–∞ —Å–∞“õ—Ç–∞–ª–¥—ã ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    await show_next_match(message.from_user.id, message.bot)

async def remind_if_no_response(user_id: int, match_id: int, bot: Bot):
    await asyncio.sleep(600)
    async with async_session_maker() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        user = await session.scalar(stmt)
        if user:
            liked = await session.execute(select(User).where(User.id == match_id))
            if liked.scalar():
                await bot.send_message(user_id, "–°—ñ–∑ ”ô–ª—ñ –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω –∂–æ“õ—Å—ã–∑ üïì. –ë“±–ª –∞–¥–∞–º–º–µ–Ω –∂“Ø–≥—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ –º–µ?", reply_markup=match_keyboard(match_id))

async def show_next_match(user_id: int, bot: Bot):
    matches = await get_matches_for(user_id)
    if not matches:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üí´")
        return
    match = matches[0]
    text = (
        f"üë§ <b>{match.name}</b>\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {match.location}\n"
        f"üèô “ö–∞–ª–∞: {match.city}\n"
        f"üïì –£–∞“õ—ã—Ç: {match.time}\n"
        f"‚è± –¢–µ–º–ø: {match.pace} –º–∏–Ω/–∫–º"
    )
    keyboard = match_keyboard(match.id)
    await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")
    asyncio.create_task(remind_if_no_response(user_id, match.id, bot))

@router.callback_query(F.data.startswith("like:") | F.data.startswith("dislike:"))
async def process_feedback(callback: CallbackQuery):
    from_user = callback.from_user.id
    data = callback.data.split(":")
    action, to_user = data[0], int(data[1])
    await save_like(from_user, to_user, action)
    if action == "like":
        mutual = await check_mutual_like(from_user, to_user)
        if mutual:
            async with async_session_maker() as session:
                from_user_obj = await session.scalar(select(User).where(User.telegram_id == from_user))
                to_user_obj = await session.scalar(select(User).where(User.telegram_id == to_user))
            if from_user_obj and to_user_obj:
                text = (
                    f"üéâ <b>{from_user_obj.name} –∏ {to_user_obj.name} —Ä–µ—à–∏–ª–∏ –º–µ—Ç—á–∏—Ç—å—Å—è!</b>\n"
                    f"–ë–æ—Ç –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ üíñ"
                )
                await callback.message.answer(text, parse_mode="HTML")
    await callback.message.edit_reply_markup()
    await show_next_match(from_user, callback.bot)

@router.message(F.text == "‚öô ”®–∑–≥–µ—Ä—Ç—É –∞–Ω–∫–µ—Ç–∞–Ω—ã")
@router.message(Command("edit"))
async def edit_profile(message: Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è"), types.KeyboardButton(text="üïì –£–∞“õ—ã—Ç")],
            [types.KeyboardButton(text="‚è± –¢–µ–º–ø"), types.KeyboardButton(text="üèô “ö–∞–ª–∞")],
            [types.KeyboardButton(text="üîÅ –ë”ô—Ä—ñ–Ω “õ–∞–π—Ç–∞ —Ç–æ–ª—Ç—ã—Ä—É")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("“ö–∞–Ω–¥–∞–π –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã ”©–∑–≥–µ—Ä—Ç–∫—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ?", reply_markup=keyboard)

@router.message(F.text.in_({"üìç –õ–æ–∫–∞—Ü–∏—è", "üïì –£–∞“õ—ã—Ç", "‚è± –¢–µ–º–ø", "üèô “ö–∞–ª–∞", "üîÅ –ë”ô—Ä—ñ–Ω “õ–∞–π—Ç–∞ —Ç–æ–ª—Ç—ã—Ä—É"}))
async def edit_field(message: Message, state: FSMContext):
    field = message.text
    await state.set_data({"edit_mode": True})
    if field == "üìç –õ–æ–∫–∞—Ü–∏—è":
        await message.answer("–ñ–∞“£–∞ –ª–æ–∫–∞—Ü–∏—è–Ω—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        await state.set_state(Form.location)
    elif field == "üïì –£–∞“õ—ã—Ç":
        await message.answer("–ñ–∞“£–∞ —É–∞“õ—ã—Ç—Ç—ã —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=time_keyboard())
        await state.set_state(Form.time)
    elif field == "‚è± –¢–µ–º–ø":
        await message.answer("–ñ–∞“£–∞ —Ç–µ–º–ø—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=pace_keyboard())
        await state.set_state(Form.pace)
    elif field == "üèô “ö–∞–ª–∞":
        await message.answer("–ñ–∞“£–∞ “õ–∞–ª–∞–Ω—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        await state.set_state(Form.city)
    elif field == "üîÅ –ë”ô—Ä—ñ–Ω “õ–∞–π—Ç–∞ —Ç–æ–ª—Ç—ã—Ä—É":
        await message.answer("–ë–∞—Å—Ç–∞–π–º—ã–∑! –ê—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑—à—ñ üòä", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        await state.set_state(Form.name)

def register_handlers(dp):
    dp.include_router(router)
