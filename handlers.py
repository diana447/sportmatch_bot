from aiogram import Router, F, Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from models import User, async_session_maker, get_matches_for, save_like, check_mutual_like
from inline_keyboard import match_keyboard
from sqlalchemy import select
from reply_keyboard import pace_keyboard, time_keyboard

router = Router()

class Form(StatesGroup):
    name = State()
    city = State()
    location = State()
    pace = State()
    time = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–°”ô–ª–µ–º! –ê—Ç—ã“£–¥—ã –µ–Ω–≥—ñ–∑—à—ñ üòä")
    await state.set_state(Form.name)

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("“ö–∞–π “õ–∞–ª–∞–¥–∞–Ω—Å—ã“£?")
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–ù–∞“õ—Ç—ã –ª–æ–∫–∞—Ü–∏—è (–º—ã—Å–∞–ª—ã, –ø–∞—Ä–∫, –∞—É–¥–∞–Ω)?")
    await state.set_state(Form.location)

@router.message(Form.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("–¢–µ–º–ø “õ–∞–Ω–¥–∞–π? (–º–∏–Ω—É—Ç/–∫–º ‚Äî —Ç–∞“£–¥–∞“£—ã–∑ –µ“£ –∂–∞“õ—ã–Ω –º”ô–Ω–¥—ñ)", reply_markup=pace_keyboard())
    await state.set_state(Form.pace)

@router.message(Form.pace)
async def process_pace(message: Message, state: FSMContext):
    await state.update_data(pace=message.text)
    await message.answer("“ö–∞–π —É–∞“õ—ã—Ç—Ç–∞ –∂“Ø–≥—ñ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ–¥—ñ? üïì", reply_markup=time_keyboard())
    await state.set_state(Form.time)

@router.message(Form.time)
async def process_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.clear()

    async with async_session_maker() as session:
        session.add(User(
            telegram_id=message.from_user.id,
            name=user_data["name"],
            city=user_data["city"],
            location=user_data["location"],
            pace=user_data["pace"],
            time=message.text
        ))
        await session.commit()

    await message.answer("–†–∞“õ–º–µ—Ç! –ê–Ω–∫–µ—Ç–∞ —Å–∞“õ—Ç–∞–ª–¥—ã ‚úÖ")
    await show_next_match(message.from_user.id, message.bot)

async def show_next_match(user_id: int, bot: Bot):
    matches = await get_matches_for(user_id)
    if not matches:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üí´")
        return

    match = matches[0]

    text = (
        f"üë§ <b>{match.name}</b>\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {match.location}\n"
        f"üèô “ö–∞–ª–∞: {match.city}\n"
        f"üïì –£–∞“õ—ã—Ç: {match.time}\n"
        f"üèÉ –¢–µ–º–ø: {match.pace}"
    )

    keyboard = match_keyboard(match.id)
    await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("like:") | F.data.startswith("dislike:"))
async def process_feedback(callback: CallbackQuery):
    from_user = callback.from_user.id
    data = callback.data.split(":")
    action, to_user = data[0], int(data[1])

    await save_like(from_user, to_user, action)

    if action == "like":
        mutual = await check_mutual_like(from_user, to_user)
        if mutual:
            async with async_session_maker() as session:
                from_user_obj = await session.scalar(select(User).where(User.telegram_id == from_user))
                to_user_obj = await session.scalar(select(User).where(User.telegram_id == to_user))

            if from_user_obj and to_user_obj:
                text = (
                    f"üéâ <b>{from_user_obj.name} –∏ {to_user_obj.name} —Ä–µ—à–∏–ª–∏ –º–µ—Ç—á–∏—Ç—å—Å—è!</b>\n"
                    f"–ë–æ—Ç –Ω–∞—à—ë–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ üíñ"
                )
                await callback.message.answer(text, parse_mode="HTML")

    await callback.message.edit_reply_markup()  # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await show_next_match(from_user, callback.bot)

def register_handlers(dp):
    dp.include_router(router)
